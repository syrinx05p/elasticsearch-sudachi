plugins {
    id 'java-library'
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
}

group = 'com.worksap.nlp'
archivesBaseName = 'analysis-sudachi'
version = '2.1.1-SNAPSHOT'

tasks.withType(JavaCompile) {
    options.release = 8
}

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    implementation 'com.worksap.nlp:sudachi:0.5.3', "org.opensearch.client:transport:${opensearchVersion}"
    testImplementation "org.opensearch.test:framework:${opensearchVersion}"
    testRuntimeOnly "org.apache.logging.log4j:log4j-core:2.17.1"
}

def buildTestDict = tasks.register('buildTestDict', JavaExec) {
    dependsOn processTestResources
    mainClass = 'com.worksap.nlp.sudachi.dictionary.DictionaryBuilder'
    classpath = sourceSets.main.runtimeClasspath
    args('-o', 'build/resources/test/com/worksap/nlp/lucene/sudachi/ja/system_core.dic', '-m', 'src/test/dict/matrix.def', 'src/test/dict/lex.csv')
}
test.dependsOn buildTestDict

def embedVersion = tasks.register('embedVersion', Copy) {
    from 'src/main/extras/plugin-descriptor.properties'
    into 'build/descriptor'
    expand([version: version, opensearchVersion: opensearchVersion])
}

def copyDependencies = tasks.register('copyDependencies', Copy) {
    def libs = ['sudachi', 'javax.json', 'jdartsclone']
    from configurations.runtimeClasspath.collect { f -> (libs.any { f.name.startsWith(it) }) ? f : null }
    into 'build/libs'
}

def distZip = tasks.register('distZip', Zip) {
    dependsOn 'jar', embedVersion, copyDependencies
    archiveBaseName = archivesBaseName
    archiveAppendix = opensearchVersion
    from 'build/libs/', 'build/descriptor', 'LICENSE', 'README.md'
}

artifacts {
    archives distZip
}

sonarqube {
    properties {
        property "sonar.projectKey", "WorksApplications_elasticsearch-sudachi"
        property "sonar.organization", "worksapplications"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test
}
